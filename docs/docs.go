// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/getall": {
            "get": {
                "description": "Retrieve all registered users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.GetAllUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server Error",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getbyid/{id}": {
            "get": {
                "description": "Retrieve a single user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.GetSingleUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server Error",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Registers a user with email, password, and name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.GetSingleUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not register",
                        "schema": {
                            "$ref": "#/definitions/rest_api_gin_internal_dtos.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest_api_gin_internal_dtos.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "rest_api_gin_internal_dtos.GetAllUserResponse": {
            "type": "object",
            "properties": {
                "Userlist": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest_api_gin_internal_dtos.GetSingleUserResponse"
                    }
                }
            }
        },
        "rest_api_gin_internal_dtos.GetSingleUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rest_api_gin_internal_dtos.RegisterUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "GO & Gin API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
